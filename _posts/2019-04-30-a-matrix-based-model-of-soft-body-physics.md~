---
layout: post
title: A Matrix Based Model Of Soft Body Physics
date: 2019-04-30 16:43 -0700
---

<script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-MML-AM_CHTML' async></script>

(allergy notice: this page contains latex. If you have your Javascript disabled, please enable it for the best possible experience reading this blog post. I promise that's the only script on this site!)

Ever since I was little, I've been enamored with physics simulations. There's something so innately satisfying about having a world at your fingertips to interact with as you please. That interest has rekindled in me over the past few days as I've been thinking about coding up a little physics toy to mess around with now that I'm a much better programmer than I was when I was 10.

This lead me down the road of considering different ways to model physical bodies. Using bounding boxes may be a tried and true method, but who am I for taking the well worn path?

My train of thought has lead me to the idea of considering each each soft body object as a set $$\left \{ V, C \right \}$$ where $$V$$ is an $$n$$-dimensional vector of nodes.

A node is a $$4$$-tuple $$\left( \pi, \delta, \alpha, \rho \right)$$ where $$\pi \in \mathbb{C}$$ is the position of the node, $$\delta \in \mathbb{C}$$ is the velocity of the node, and $$\alpha \in \mathbb{C}$$ is the acceleration of the node. The mass of the node is $$\rho \in \mathbb{Z}$$.

More importantly, though, is the $$n\times n$$-dimensional $$C$$ matrix representing connections between nodes.

Each row and column of $$C$$ corresponds to a node entry in $$V$$. Entry $$C_{ij}$$ corresponds to the distance that the $$i$$th node wants to be from the $$j$$th node. This is represented by:

$$C = \begin{bmatrix}
	C_{00} & C_{01} & C_{02} & \dots & C_{0n} \\
	C_{10} & C_{11} & C_{12} & \dots & C_{1n} \\
	C_{20} & C_{21} & C_{22} & \dots & C_{2n} \\
	\vdots & \vdots & \vdots & \ddots & \vdots \\
	C_{n0} & C_{n1} & C_{n2} & \dots & C_{nn} 
\end{bmatrix}$$

Some immediate comments:

* The main diagonal of $$C$$ is uniformly $$0$$.
* \\(C_{ij} = C_{ji}\\)

Stepping forward the $$\pi$$ and $$\delta$$ elements of the nodes of $$V$$ by time $$t$$ is _likely_ simple Euler integration.

To step forward $$\alpha$$ in every node of $$V$$, we must produce a new vector $$V_{\alpha_t}$$ comprised of the new $$\alpha$$ values after time $$t$$. 

To produce $$V_{\alpha_t}$$, we first must transform $$V$$ into a vector of positions $$V_\pi$$ by taking the first element of each node tuple.
